/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export type Uint128 = string;
export interface InstantiateMsg {
  accepted_denom: string[];
  collector_address: string;
  duration: number;
  extension_duration: number;
  max_royalty_fee: Decimal;
  min_increment: Decimal;
  min_reserve_price: Uint128;
  protocol_fee: Decimal;
}
export type ExecuteMsg = {
  receive_nft: Cw721ReceiveMsg;
} | {
  cancel_auction: {
    auction_id: Uint128;
  };
} | {
  place_bid: {
    auction_id: Uint128;
  };
} | {
  settle: {
    auction_id: Uint128;
  };
} | {
  admin_change_config: {
    accepted_denom: string[];
    collector_address: string;
    duration: number;
    extension_duration: number;
    max_royalty_fee: Decimal;
    min_increment: Decimal;
    min_reserve_price: Uint128;
    protocol_fee: Decimal;
  };
} | {
  admin_cancel_auction: {
    auction_id: Uint128;
  };
} | {
  set_royalty_fee: {
    contract_addr: string;
    creator: string;
    royalty_fee: Decimal;
  };
} | {
  set_royalty_admin: {
    address: string;
    enable: boolean;
  };
} | {
  admin_pause: {};
} | {
  admin_resume: {};
} | {
  settle_hook: {
    nft_contract: string;
    owner: string;
    token_id: string;
  };
};
export type Binary = string;
export interface Cw721ReceiveMsg {
  msg: Binary;
  sender: string;
  token_id: string;
  [k: string]: unknown;
}
export type QueryMsg = {
  config: {};
} | {
  state: {};
} | {
  auction: {
    auction_id: Uint128;
  };
} | {
  royalty_fee: {
    contract_addr: string;
  };
} | {
  royalty_admin: {
    address: string;
  };
} | {
  all_royalty_fee: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  calculate_price: {
    amount: Uint128;
    nft_contract: string;
    token_id: string;
  };
} | {
  nft_auction: {
    nft_contract: string;
    token_id: string;
  };
} | {
  bid_history_by_auction_id: {
    auction_id: Uint128;
    limit?: number | null;
  };
} | {
  bids_count: {
    auction_id: Uint128;
  };
} | {
  auction_by_contract: {
    limit?: number | null;
    nft_contract: string;
  };
} | {
  auction_by_seller: {
    limit?: number | null;
    seller: string;
  };
} | {
  auction_by_amount: {
    amount: Uint128;
    limit?: number | null;
    nft_contract: string;
  };
} | {
  auction_by_end_time: {
    end_time: number;
    is_desc?: boolean | null;
    limit?: number | null;
    nft_contract: string;
  };
} | {
  not_started_auction: {
    is_desc?: boolean | null;
    limit?: number | null;
    nft_contract: string;
    start_after?: number | null;
  };
} | {
  auction_by_bidder: {
    bidder: string;
    limit?: number | null;
    start_after?: number | null;
  };
};
export interface MigrateMsg {}
export interface AllRoyaltyListResponse {
  royalty_fees: AllRoyaltyResponse[];
}
export interface AllRoyaltyResponse {
  contract_addr: string;
  creator: string;
  royalty_fee: Decimal;
}
export type AuctionType = "auction" | "buy_now";
export interface AuctionResponse {
  amount: Uint128;
  auction_id: Uint128;
  auction_type: AuctionType;
  bidder?: string | null;
  creator_address?: string | null;
  denom: string;
  duration: number;
  end_time: number;
  extension_duration: number;
  is_settled: boolean;
  nft_contract: string;
  reserve_price: Uint128;
  royalty_fee: Decimal;
  seller: string;
  token_id: string;
}
export interface AuctionListResponse {
  auctions: AuctionResponse[];
}
export type Addr = string;
export interface BidHistoryByAuctionIdResponse {
  bids: Bid[];
}
export interface Bid {
  amount: Uint128;
  auction_id: Uint128;
  bidder: Addr;
  denom: string;
  time: number;
}
export interface CalculatePriceResponse {
  amount: Uint128;
  nft_contract: string;
  protocol_fee: Uint128;
  royalty_fee: Uint128;
  seller_amount: Uint128;
  token_id: string;
}
export interface ConfigResponse {
  accepted_denom: string[];
  collector_address: string;
  duration: number;
  extension_duration: number;
  max_royalty_fee: Decimal;
  min_increment: Decimal;
  min_reserve_price: Uint128;
  owner: string;
  protocol_fee: Decimal;
}
export interface RoyaltyAdminResponse {
  address: string;
  enable: boolean;
}
export interface RoyaltyFeeResponse {
  royalty_fee?: RoyaltyResponse | null;
}
export interface RoyaltyResponse {
  creator: string;
  royalty_fee: Decimal;
}
export interface StateResponse {
  is_freeze: boolean;
  next_auction_id: Uint128;
}
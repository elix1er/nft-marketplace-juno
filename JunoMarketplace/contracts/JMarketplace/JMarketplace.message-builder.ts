/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Decimal, Uint128, InstantiateMsg, ExecuteMsg, Binary, Cw721ReceiveMsg, QueryMsg, MigrateMsg, AllRoyaltyListResponse, AllRoyaltyResponse, AuctionType, AuctionResponse, AuctionListResponse, Addr, BidHistoryByAuctionIdResponse, Bid, CalculatePriceResponse, ConfigResponse, RoyaltyAdminResponse, RoyaltyFeeResponse, RoyaltyResponse, StateResponse } from "./JMarketplace.types";
import { CamelCasedProperties } from "type-fest";
export abstract class JMarketplaceExecuteMsgBuilder {
  static receiveNft = ({
    msg,
    sender,
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    receive_nft: unknown;
  }>["receive_nft"]>): ExecuteMsg => {
    return {
      receive_nft: ({
        msg,
        sender,
        token_id: tokenId
      } as const)
    };
  };
  static cancelAuction = ({
    auctionId
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    cancel_auction: unknown;
  }>["cancel_auction"]>): ExecuteMsg => {
    return {
      cancel_auction: ({
        auction_id: auctionId
      } as const)
    };
  };
  static placeBid = ({
    auctionId
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    place_bid: unknown;
  }>["place_bid"]>): ExecuteMsg => {
    return {
      place_bid: ({
        auction_id: auctionId
      } as const)
    };
  };
  static settle = ({
    auctionId
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    settle: unknown;
  }>["settle"]>): ExecuteMsg => {
    return {
      settle: ({
        auction_id: auctionId
      } as const)
    };
  };
  static adminChangeConfig = ({
    acceptedDenom,
    collectorAddress,
    duration,
    extensionDuration,
    maxRoyaltyFee,
    minIncrement,
    minReservePrice,
    protocolFee
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    admin_change_config: unknown;
  }>["admin_change_config"]>): ExecuteMsg => {
    return {
      admin_change_config: ({
        accepted_denom: acceptedDenom,
        collector_address: collectorAddress,
        duration,
        extension_duration: extensionDuration,
        max_royalty_fee: maxRoyaltyFee,
        min_increment: minIncrement,
        min_reserve_price: minReservePrice,
        protocol_fee: protocolFee
      } as const)
    };
  };
  static adminCancelAuction = ({
    auctionId
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    admin_cancel_auction: unknown;
  }>["admin_cancel_auction"]>): ExecuteMsg => {
    return {
      admin_cancel_auction: ({
        auction_id: auctionId
      } as const)
    };
  };
  static setRoyaltyFee = ({
    contractAddr,
    creator,
    royaltyFee
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    set_royalty_fee: unknown;
  }>["set_royalty_fee"]>): ExecuteMsg => {
    return {
      set_royalty_fee: ({
        contract_addr: contractAddr,
        creator,
        royalty_fee: royaltyFee
      } as const)
    };
  };
  static setRoyaltyAdmin = ({
    address,
    enable
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    set_royalty_admin: unknown;
  }>["set_royalty_admin"]>): ExecuteMsg => {
    return {
      set_royalty_admin: ({
        address,
        enable
      } as const)
    };
  };
  static adminPause = (): ExecuteMsg => {
    return {
      admin_pause: ({} as const)
    };
  };
  static adminResume = (): ExecuteMsg => {
    return {
      admin_resume: ({} as const)
    };
  };
  static settleHook = ({
    nftContract,
    owner,
    tokenId
  }: CamelCasedProperties<Extract<ExecuteMsg, {
    settle_hook: unknown;
  }>["settle_hook"]>): ExecuteMsg => {
    return {
      settle_hook: ({
        nft_contract: nftContract,
        owner,
        token_id: tokenId
      } as const)
    };
  };
}
export abstract class JMarketplaceQueryMsgBuilder {
  static config = (): QueryMsg => {
    return {
      config: ({} as const)
    };
  };
  static state = (): QueryMsg => {
    return {
      state: ({} as const)
    };
  };
  static auction = ({
    auctionId
  }: CamelCasedProperties<Extract<QueryMsg, {
    auction: unknown;
  }>["auction"]>): QueryMsg => {
    return {
      auction: ({
        auction_id: auctionId
      } as const)
    };
  };
  static royaltyFee = ({
    contractAddr
  }: CamelCasedProperties<Extract<QueryMsg, {
    royalty_fee: unknown;
  }>["royalty_fee"]>): QueryMsg => {
    return {
      royalty_fee: ({
        contract_addr: contractAddr
      } as const)
    };
  };
  static royaltyAdmin = ({
    address
  }: CamelCasedProperties<Extract<QueryMsg, {
    royalty_admin: unknown;
  }>["royalty_admin"]>): QueryMsg => {
    return {
      royalty_admin: ({
        address
      } as const)
    };
  };
  static allRoyaltyFee = ({
    limit,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    all_royalty_fee: unknown;
  }>["all_royalty_fee"]>): QueryMsg => {
    return {
      all_royalty_fee: ({
        limit,
        start_after: startAfter
      } as const)
    };
  };
  static calculatePrice = ({
    amount,
    nftContract,
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    calculate_price: unknown;
  }>["calculate_price"]>): QueryMsg => {
    return {
      calculate_price: ({
        amount,
        nft_contract: nftContract,
        token_id: tokenId
      } as const)
    };
  };
  static nftAuction = ({
    nftContract,
    tokenId
  }: CamelCasedProperties<Extract<QueryMsg, {
    nft_auction: unknown;
  }>["nft_auction"]>): QueryMsg => {
    return {
      nft_auction: ({
        nft_contract: nftContract,
        token_id: tokenId
      } as const)
    };
  };
  static bidHistoryByAuctionId = ({
    auctionId,
    limit
  }: CamelCasedProperties<Extract<QueryMsg, {
    bid_history_by_auction_id: unknown;
  }>["bid_history_by_auction_id"]>): QueryMsg => {
    return {
      bid_history_by_auction_id: ({
        auction_id: auctionId,
        limit
      } as const)
    };
  };
  static bidsCount = ({
    auctionId
  }: CamelCasedProperties<Extract<QueryMsg, {
    bids_count: unknown;
  }>["bids_count"]>): QueryMsg => {
    return {
      bids_count: ({
        auction_id: auctionId
      } as const)
    };
  };
  static auctionByContract = ({
    limit,
    nftContract
  }: CamelCasedProperties<Extract<QueryMsg, {
    auction_by_contract: unknown;
  }>["auction_by_contract"]>): QueryMsg => {
    return {
      auction_by_contract: ({
        limit,
        nft_contract: nftContract
      } as const)
    };
  };
  static auctionBySeller = ({
    limit,
    seller
  }: CamelCasedProperties<Extract<QueryMsg, {
    auction_by_seller: unknown;
  }>["auction_by_seller"]>): QueryMsg => {
    return {
      auction_by_seller: ({
        limit,
        seller
      } as const)
    };
  };
  static auctionByAmount = ({
    amount,
    limit,
    nftContract
  }: CamelCasedProperties<Extract<QueryMsg, {
    auction_by_amount: unknown;
  }>["auction_by_amount"]>): QueryMsg => {
    return {
      auction_by_amount: ({
        amount,
        limit,
        nft_contract: nftContract
      } as const)
    };
  };
  static auctionByEndTime = ({
    endTime,
    isDesc,
    limit,
    nftContract
  }: CamelCasedProperties<Extract<QueryMsg, {
    auction_by_end_time: unknown;
  }>["auction_by_end_time"]>): QueryMsg => {
    return {
      auction_by_end_time: ({
        end_time: endTime,
        is_desc: isDesc,
        limit,
        nft_contract: nftContract
      } as const)
    };
  };
  static notStartedAuction = ({
    isDesc,
    limit,
    nftContract,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    not_started_auction: unknown;
  }>["not_started_auction"]>): QueryMsg => {
    return {
      not_started_auction: ({
        is_desc: isDesc,
        limit,
        nft_contract: nftContract,
        start_after: startAfter
      } as const)
    };
  };
  static auctionByBidder = ({
    bidder,
    limit,
    startAfter
  }: CamelCasedProperties<Extract<QueryMsg, {
    auction_by_bidder: unknown;
  }>["auction_by_bidder"]>): QueryMsg => {
    return {
      auction_by_bidder: ({
        bidder,
        limit,
        start_after: startAfter
      } as const)
    };
  };
}
/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Decimal, Uint128, InstantiateMsg, ExecuteMsg, Binary, Cw721ReceiveMsg, QueryMsg, MigrateMsg, AllRoyaltyListResponse, AllRoyaltyResponse, AuctionType, AuctionResponse, AuctionListResponse, Addr, BidHistoryByAuctionIdResponse, Bid, CalculatePriceResponse, ConfigResponse, RoyaltyAdminResponse, RoyaltyFeeResponse, RoyaltyResponse, StateResponse } from "./JMarketplace.types";
export interface JMarketplaceMsg {
  contractAddress: string;
  sender: string;
  receiveNft: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  cancelAuction: ({
    auctionId
  }: {
    auctionId: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  placeBid: ({
    auctionId
  }: {
    auctionId: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  settle: ({
    auctionId
  }: {
    auctionId: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  adminChangeConfig: ({
    acceptedDenom,
    collectorAddress,
    duration,
    extensionDuration,
    maxRoyaltyFee,
    minIncrement,
    minReservePrice,
    protocolFee
  }: {
    acceptedDenom: string[];
    collectorAddress: string;
    duration: number;
    extensionDuration: number;
    maxRoyaltyFee: Decimal;
    minIncrement: Decimal;
    minReservePrice: Uint128;
    protocolFee: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  adminCancelAuction: ({
    auctionId
  }: {
    auctionId: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setRoyaltyFee: ({
    contractAddr,
    creator,
    royaltyFee
  }: {
    contractAddr: string;
    creator: string;
    royaltyFee: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setRoyaltyAdmin: ({
    address,
    enable
  }: {
    address: string;
    enable: boolean;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  adminPause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  adminResume: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  settleHook: ({
    nftContract,
    owner,
    tokenId
  }: {
    nftContract: string;
    owner: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class JMarketplaceMsgComposer implements JMarketplaceMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receiveNft = this.receiveNft.bind(this);
    this.cancelAuction = this.cancelAuction.bind(this);
    this.placeBid = this.placeBid.bind(this);
    this.settle = this.settle.bind(this);
    this.adminChangeConfig = this.adminChangeConfig.bind(this);
    this.adminCancelAuction = this.adminCancelAuction.bind(this);
    this.setRoyaltyFee = this.setRoyaltyFee.bind(this);
    this.setRoyaltyAdmin = this.setRoyaltyAdmin.bind(this);
    this.adminPause = this.adminPause.bind(this);
    this.adminResume = this.adminResume.bind(this);
    this.settleHook = this.settleHook.bind(this);
  }
  receiveNft = ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive_nft: {
            msg,
            sender,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  cancelAuction = ({
    auctionId
  }: {
    auctionId: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          cancel_auction: {
            auction_id: auctionId
          }
        })),
        funds: _funds
      })
    };
  };
  placeBid = ({
    auctionId
  }: {
    auctionId: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          place_bid: {
            auction_id: auctionId
          }
        })),
        funds: _funds
      })
    };
  };
  settle = ({
    auctionId
  }: {
    auctionId: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          settle: {
            auction_id: auctionId
          }
        })),
        funds: _funds
      })
    };
  };
  adminChangeConfig = ({
    acceptedDenom,
    collectorAddress,
    duration,
    extensionDuration,
    maxRoyaltyFee,
    minIncrement,
    minReservePrice,
    protocolFee
  }: {
    acceptedDenom: string[];
    collectorAddress: string;
    duration: number;
    extensionDuration: number;
    maxRoyaltyFee: Decimal;
    minIncrement: Decimal;
    minReservePrice: Uint128;
    protocolFee: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          admin_change_config: {
            accepted_denom: acceptedDenom,
            collector_address: collectorAddress,
            duration,
            extension_duration: extensionDuration,
            max_royalty_fee: maxRoyaltyFee,
            min_increment: minIncrement,
            min_reserve_price: minReservePrice,
            protocol_fee: protocolFee
          }
        })),
        funds: _funds
      })
    };
  };
  adminCancelAuction = ({
    auctionId
  }: {
    auctionId: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          admin_cancel_auction: {
            auction_id: auctionId
          }
        })),
        funds: _funds
      })
    };
  };
  setRoyaltyFee = ({
    contractAddr,
    creator,
    royaltyFee
  }: {
    contractAddr: string;
    creator: string;
    royaltyFee: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_royalty_fee: {
            contract_addr: contractAddr,
            creator,
            royalty_fee: royaltyFee
          }
        })),
        funds: _funds
      })
    };
  };
  setRoyaltyAdmin = ({
    address,
    enable
  }: {
    address: string;
    enable: boolean;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_royalty_admin: {
            address,
            enable
          }
        })),
        funds: _funds
      })
    };
  };
  adminPause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          admin_pause: {}
        })),
        funds: _funds
      })
    };
  };
  adminResume = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          admin_resume: {}
        })),
        funds: _funds
      })
    };
  };
  settleHook = ({
    nftContract,
    owner,
    tokenId
  }: {
    nftContract: string;
    owner: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          settle_hook: {
            nft_contract: nftContract,
            owner,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
}